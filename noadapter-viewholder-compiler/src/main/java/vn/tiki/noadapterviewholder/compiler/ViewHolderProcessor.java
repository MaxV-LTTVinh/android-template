package vn.tiki.noadapterviewholder.compiler;

import com.google.auto.service.AutoService;
import com.squareup.javapoet.ClassName;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.annotation.Annotation;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.type.TypeMirror;
import javax.tools.Diagnostic;
import vn.tiki.noadapterviewholder.ViewHolder;

@AutoService(Processor.class)
public final class ViewHolderProcessor extends AbstractProcessor {

  static final ClassName VIEW_HOLDER_DELEGATE = ClassName.get(
      "vn.tiki.noadapterviewholder",
      "ViewHolderDelegate");

  static final ClassName VIEW = ClassName.get("android.view", "View");
  private Filer filer;

  @Override
  public Set<String> getSupportedAnnotationTypes() {
    Set<String> types = new LinkedHashSet<>();
    types.add(ViewHolder.class.getCanonicalName());
    return types;
  }

  @Override
  public SourceVersion getSupportedSourceVersion() {
    return SourceVersion.latestSupported();
  }

  @Override
  public synchronized void init(ProcessingEnvironment env) {
    super.init(env);

    filer = env.getFiler();
  }

  @Override
  public boolean process(Set<? extends TypeElement> set, RoundEnvironment env) {
    Map<TypeElement, ViewHolderInfo> bindingMap = findAndParseTargets(env);

    if (bindingMap.isEmpty()) {
      return false;
    }

    for (Map.Entry<TypeElement, ViewHolderInfo> entry : bindingMap.entrySet()) {
      TypeElement typeElement = entry.getKey();
      final ViewHolderInfo viewHolderInfo = entry.getValue();

      try {
        new ViewHolderDelegate(typeElement, viewHolderInfo)
            .brewJava()
            .writeTo(filer);

      } catch (IOException e) {
        error(typeElement, "Unable to write binding for type %s: %s", typeElement, e.getMessage());
      }
    }

    return false;
  }

  private void error(Element element, String message, Object... args) {
    printMessage(Diagnostic.Kind.ERROR, element, message, args);
  }

  private Map<TypeElement, ViewHolderInfo> findAndParseTargets(RoundEnvironment env) {
    Map<TypeElement, ViewHolderInfo> builderMap = new LinkedHashMap<>();
    // Process each @BindExtra element.
    for (Element element : env.getElementsAnnotatedWith(ViewHolder.class)) {
      // we don't SuperficialValidation.validateElement(element)
      // so that an unresolved View type can be generated by later processing rounds
      try {
        final ViewHolder annotation = element.getAnnotation(ViewHolder.class);
        final int layout = annotation.layout();
        final int[] onClick = annotation.onClick();
        final ExecutableElement bindMethod = findMethod(element, "bind");
        final List<? extends VariableElement> parameters = bindMethod.getParameters();
        final TypeElement targetType = (TypeElement) processingEnv.getTypeUtils().asElement(parameters.get(0).asType());
        final ClassName itemClassName = ClassName.get(targetType);
        final ViewHolderInfo viewHolderInfo = new ViewHolderInfo(layout, onClick, itemClassName);
        TypeElement typeElement = (TypeElement) element;
        builderMap.put(typeElement, viewHolderInfo);
      } catch (Exception e) {
        logParsingError(element, ViewHolder.class, e);
      }
    }

    return builderMap;
  }

  private ExecutableElement findMethod(Element element, String name) {
    final List<? extends Element> elements = element.getEnclosedElements();
    for (Element e : elements) {
      if (e instanceof ExecutableElement && name.equals(e.getSimpleName().toString())) {
        return (ExecutableElement) e;
      }
    }
    throw new IllegalArgumentException("method " + name + " not found in class " + element);
  }

  private void logParsingError(
      Element element, Class<? extends Annotation> annotation,
      Exception e) {
    StringWriter stackTrace = new StringWriter();
    e.printStackTrace(new PrintWriter(stackTrace));
    error(element, "Unable to parse @%s binding.\n\n%s", annotation.getSimpleName(), stackTrace);
  }

  private void printMessage(Diagnostic.Kind kind, Element element, String message, Object[] args) {
    if (args.length > 0) {
      message = String.format(message, args);
    }

    processingEnv.getMessager().printMessage(kind, message, element);
  }

  private static boolean isTypeEqual(TypeMirror typeMirror, String otherType) {
    return otherType.equals(typeMirror.toString());
  }
}