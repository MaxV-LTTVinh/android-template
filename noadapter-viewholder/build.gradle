import org.gradle.internal.jvm.Jvm
import vn.tiki.Deps

apply plugin: 'com.android.library'

android {
  compileSdkVersion Deps.Version.compileSdk

  defaultConfig {
    minSdkVersion Deps.Version.minSdk
    targetSdkVersion Deps.Version.compileSdk

    consumerProguardFiles 'proguard-rules.txt'

    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

    javaCompileOptions {
      annotationProcessorOptions {
        includeCompileClasspath = true
      }
    }
  }

  lintOptions {
    textReport true
    textOutput 'stdout'
    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
    checkReleaseBuilds false
  }
}

dependencies {
  api project(':noadapter-viewholder-annotations')
  implementation Deps.AndroidSupport.annotations
  implementation Deps.noadapter

  androidTestImplementation Deps.Test.junit
  androidTestImplementation Deps.Test.truth
  androidTestImplementation Deps.AndroidSupport.testRunner

  testImplementation Deps.Test.junit
  testImplementation Deps.Test.truth
  testImplementation Deps.Test.compileTesting
  testImplementation files(getRuntimeJar())
  testImplementation files(Jvm.current().getToolsJar())
  testImplementation project(':noadapter-viewholder-compiler')
}

static def getRuntimeJar() {
  try {
    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile()
    File runtimeJar = new File(javaBase, "lib/rt.jar")
    if (runtimeJar.exists()) {
      return runtimeJar
    }
    runtimeJar = new File(javaBase, "jre/lib/rt.jar")
    return runtimeJar.exists() ? runtimeJar : null
  } catch (IOException e) {
    throw new RuntimeException(e)
  }
}

apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
