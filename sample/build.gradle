buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'jacoco'

android {
  compileSdkVersion versions.compileSdk
  buildToolsVersion versions.buildTools

  defaultConfig {
    applicationId "vn.tiki.sample"
    minSdkVersion versions.minSdk
    targetSdkVersion versions.compileSdk
    versionCode 1
    versionName "1.0"

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  buildTypes {
    debug {
      ext.enableCrashlytics = false
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  testOptions {
    unitTests {
      includeAndroidResources = true
      all {
        jacoco {
          includeNoLocationClasses = true
        }
      }
    }
  }

  flavorDimensions "default"
  productFlavors {
    dev {
      dimension "default"
      resValue "string", "app_name", "Temp_Dev"
    }
    prod {
      dimension "default"
      resValue "string", "app_name", "Template"
    }
  }

  applicationVariants.all { variant ->
    variant.outputs.all {
      outputFileName = "${variant.name}-${variant.versionName}.apk"
    }
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation deps.support.appCompat
  implementation deps.support.design
  implementation deps.support.constrain
  implementation deps.dagger.dagger
  annotationProcessor deps.dagger.compiler
  implementation deps.butterknife.butterknife
  annotationProcessor deps.butterknife.compiler
  implementation deps.rx.java
  implementation deps.rx.android
  implementation project(':daggers')
  implementation project(':mvp')
  implementation project(':intents')
  annotationProcessor project(':intents-compiler')
  //  implementation deps.tiki.daggers
  //  implementation deps.tiki.mvp
  //  implementation deps.tiki.intents.intents
  //  annotationProcessor deps.tiki.intents.compiler
  implementation deps.retrofit.retrofit
  implementation deps.retrofit.gsonConverter
  implementation deps.retrofit.rxJavaAdapter
  compileOnly deps.autoValue.autoValueAnnotation
  annotationProcessor deps.autoValue.autoValue
  implementation deps.noadapter
  implementation deps.timber

  testImplementation deps.test.junit
  testImplementation deps.test.mockito
  testImplementation deps.test.truth
  testImplementation deps.test.robolectric
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

  reports {
    xml.enabled = true
    html.enabled = true
  }

  def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
  def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
  def mainSrc = "${project.projectDir}/src/main/java"

  sourceDirectories = files([mainSrc])
  classDirectories = files([debugTree])
  executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}
